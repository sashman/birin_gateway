scalar DateTime

type User {
  id: ID!
  auth_id: String
  email: String
  name: String
  license_number: String
  initials: String
  ring_series(type: String): [RingSeries]!
  ring_numbers: [RingNumber]!
  ring_types: UserRingTypeCounts!
}

type RingNumber {
  type: String!
  number: String!
  ring_series: RingSeries!
}

type RingSeries {
  type: String!
  size: Int!
  start_number: String!
  end_number: String!
  ring_numbers: [RingNumber]!
  allocated_at: DateTime
  received_at: DateTime!
  user: User
}

type UserRingTypeCounts {
  data: [AllocatedRingTypeCounts]!
  total: Int!
}

type AllocatedRingTypeCounts {
  type: String!
  total: Int!
}

type RingTypeCounts {
  type: String!
  total: Int!
  allocated: Int!
}

type Query {
  users: [User]!
  user(id: ID!): User
  ring_series: [RingSeries]!
  ring_types: [RingTypeCounts]!
  ring_number(number: String!): RingNumber
}

type Mutation {
  createUser(data: UserInput!): User!
}

input UserInput {
  auth_id: String!
  email: String!
  name: String
  license_number: String
}
